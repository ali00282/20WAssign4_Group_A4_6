DROP TABLE EMPLOYEE IF EXISTS;

DROP TABLE ADDRESS IF EXISTS;

DROP TABLE PHONE IF EXISTS;

DROP TABLE EMP_PROJ IF EXISTS;

DROP TABLE PROJECT IF EXISTS;

DROP TABLE EMPLOYEE_TASKS IF EXISTS;

DROP TABLE HPHONE IF EXISTS;

DROP TABLE MPHONE IF EXISTS;

DROP TABLE WPHONE IF EXISTS;

DROP TABLE SECURITY_USER IF EXISTS;

DROP TABLE SECURITY_ROLE IF EXISTS;

CREATE TABLE EMPLOYEE (
    EMP_ID INTEGER IDENTITY NOT NULL,
    FNAME VARCHAR,
    LNAME VARCHAR,
    SALARY DOUBLE,
    VERSION INTEGER,
    CREATED_DATE TIMESTAMP,
    UPDATED_DATE TIMESTAMP,
    ADDR_ID INTEGER,
    PRIMARY KEY (EMP_ID)
);

CREATE TABLE ADDRESS (
    ADDR_ID INTEGER IDENTITY NOT NULL,
    CITY VARCHAR,
    COUNTRY VARCHAR,
    POSTAL VARCHAR,
    STATE VARCHAR,
    STREET VARCHAR,
    VERSION INTEGER,
    CREATED_DATE TIMESTAMP,
    UPDATED_DATE TIMESTAMP,
    PRIMARY KEY (ADDR_ID)
);

CREATE TABLE PHONE (
    PHONE_ID INTEGER IDENTITY NOT NULL,
    AREACODE VARCHAR,
    PHONENUMBER VARCHAR,
    PHONE_TYPE VARCHAR,
    VERSION INTEGER,
    CREATED_DATE TIMESTAMP,
    UPDATED_DATE TIMESTAMP,
    OWNING_EMP_ID INTEGER,
    MAP_COORDS VARCHAR(100),
    PROVIDER VARCHAR,
    DEPARTMENT VARCHAR,
    PRIMARY KEY (PHONE_ID)
);

CREATE TABLE PROJECT (
    PROJ_ID INTEGER IDENTITY NOT NULL,
    DESCRIPTION VARCHAR,
    NAME VARCHAR,
    VERSION INTEGER,
    CREATED_DATE TIMESTAMP,
    UPDATED_DATE TIMESTAMP,
    PRIMARY KEY (PROJ_ID)
);

CREATE TABLE EMP_PROJ (
    EMP_ID INTEGER NOT NULL,
    PROJ_ID INTEGER NOT NULL,
    PRIMARY KEY (EMP_ID, PROJ_ID)
);



-- New Tables
CREATE TABLE SECURITY_USER (
    USER_ID INTEGER IDENTITY NOT NULL,
    PWHASH VARCHAR,
    USERNAME VARCHAR,
    EMP_ID INTEGER,
    PRIMARY KEY (USER_ID)
);

CREATE TABLE SECURITY_ROLE (
    ROLE_ID INTEGER IDENTITY NOT NULL,
    ROLENAME VARCHAR,
    PRIMARY KEY (ROLE_ID)
);

CREATE TABLE SECURITY_USER_SECURITY_ROLE (
    USER_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    PRIMARY KEY (USER_ID, ROLE_ID)
);

-- Constraint for SECURITY_USER TABLE
ALTER TABLE
    SECURITY_USER ADD CONSTRAINT FK_SECURITY_USER_EMP_ID FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID);
ALTER TABLE
    SECURITY_USER_SECURITY_ROLE ADD CONSTRAINT FK_SECURITY_USER_SECURITY_ROLE_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES SECURITY_ROLE(ROLE_ID);
ALTER TABLE
    SECURITY_USER_SECURITY_ROLE ADD CONSTRAINT FK_SECURITY_USER_SECURITY_ROLE_USER_ID FOREIGN KEY (USER_ID) REFERENCES SECURITY_USER(USER_ID);


ALTER TABLE
    EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_ADDR_ID FOREIGN KEY (ADDR_ID) REFERENCES ADDRESS(ADDR_ID);
ALTER TABLE
    PHONE ADD CONSTRAINT FK_PHONE_OWNING_EMP_ID FOREIGN KEY (OWNING_EMP_ID) REFERENCES EMPLOYEE(EMP_ID);
ALTER TABLE
    EMP_PROJ ADD CONSTRAINT FK_EMP_PROJ_PROJ_ID FOREIGN KEY (PROJ_ID) REFERENCES PROJECT(PROJ_ID);
ALTER TABLE
    EMP_PROJ ADD CONSTRAINT FK_EMP_PROJ_EMP_ID FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(EMP_ID);

CREATE TABLE 
    EMPLOYEE_TASKS (OWNING_EMP_ID INTEGER NOT NULL,
    TASK_DESCRIPTION VARCHAR(100),
    TASK_START TIMESTAMP,
    TASK_END_DATE TIMESTAMP,
    TASK_DONE BOOLEAN,
    PRIMARY KEY (OWNING_EMP_ID)
);
ALTER TABLE
    EMPLOYEE_TASKS ADD CONSTRAINT FK_OWNING_EMP_ID_EMP_ID FOREIGN KEY(OWNING_EMP_ID) REFERENCES EMPLOYEE(EMP_ID);

